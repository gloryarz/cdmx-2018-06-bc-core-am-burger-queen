{"version":3,"sources":["Config/ConfigFB.js","Components/Nav/index.jsx","Components/Wall/index.jsx","Components/Login/index.jsx","Components/App/index.js","serviceWorker.js","index.js","Components/Login/logo.svg"],"names":["fbsConfig","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","logout","bind","assertThisInitialized","auth","signOut","react_default","a","createElement","Nav","className","Row","Col","xs","xsOffset","onClick","Component","Wall","Components_Nav","Grid","Login","login","handleChange","state","email","password","el","setState","defineProperty","target","name","value","preventDefault","signInWithEmailAndPassword","then","u","catch","error","console","log","Image","src","logo","alt","responsive","Form","horizontal","md","mdOffset","lg","lgOffset","FormControl","onChange","type","id","placeholder","Button","App","user","authListener","_this2","onAuthStateChanged","localStorage","setItem","uid","photoURL","displayName","removeItem","Components_Wall","Components_Login","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7aa755c6.chunk.js","sourcesContent":["import firebase from 'firebase';\nconst config = {\n  apiKey: \"AIzaSyAjJOccmVzGilFQrv4rISTJMxBRn7_Yjiw\",\n  authDomain: \"reactjssocialmedia.firebaseapp.com\",\n  databaseURL: \"https://reactjssocialmedia.firebaseio.com\",\n  projectId: \"reactjssocialmedia\",\n  storageBucket: \"reactjssocialmedia.appspot.com\",\n  messagingSenderId: \"544316527350\"\n};\n\nconst fbsConfig = firebase.initializeApp(config);\n\nexport { fbsConfig };","import React, { Component } from \"react\";\nimport { fbsConfig } from \"../../Config/ConfigFB\";\nimport { Nav, Col, Row } from \"react-bootstrap\";\nimport './nav.css'\n\nclass NavBar extends Component {\n  constructor(props) {\n    super(props);\n    this.logout = this.logout.bind(this);\n  }\n\n  logout() {\n    fbsConfig.auth().signOut();\n  }\n\n  render() {\n    return (\n      <Nav className=\"bg\">\n        <Row>\n          <Col xs={8} xsOffset={1}>\n            <h4 className=\"bee\">Burger Queen</h4>\n          </Col>\n          <Col xs={2}>\n            <p onClick={this.logout} className=\"exit\"><i className=\"fas fa-sign-out-alt\"></i></p>\n          </Col>\n        </Row>\n      </Nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport NavBar from '../Nav/'\nimport { Col, Row, Grid } from 'react-bootstrap';\n\nclass Wall extends Component {\n\n    render() {\n        return (\n            <div>\n            <NavBar />\n            <Grid>\n                \n            </Grid>\n            </div>\n        );\n\n    }\n\n}\n\nexport default Wall;","import React, { Component } from \"react\";\nimport { fbsConfig } from \"../../Config/ConfigFB\";\nimport firebase from \"firebase\";\nimport {\n  Row,\n  Form,\n  Col,\n  FormControl,\n  Button,\n  Grid,\n  Image\n} from \"react-bootstrap\";\nimport logo from \"../Login/logo.svg\";\nimport \"../Login/login.css\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.login = this.login.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n  }\n\n  handleChange(el) {\n    this.setState({ [el.target.name]: el.target.value });\n  }\n\n  login(el) {\n    el.preventDefault();\n    fbsConfig\n      .auth()\n      .signInWithEmailAndPassword(this.state.email, this.state.password)\n      .then(u => {})\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n\n  render() {\n    return (\n      <div className=\"Login\">\n        <Grid>\n          <Row>\n            <Col \n            className=\"logo\">\n              <Image src={logo} alt=\"bee\" className=\"bee\" responsive></Image>\n            </Col>\n          </Row>\n          <Form horizontal>\n                <Col xs={12} md={8} mdOffset={2} lg={6} lgOffset={3}>\n                  <FormControl value={this.state.email} onChange={this.handleChange} \n                  type=\"email\" name=\"email\" id=\"exampleInputEmail1\" placeholder=\"Email\" \n                  className=\"social inputs\"/>\n                </Col>\n\n                <Col xs={12} md={8} mdOffset={2} lg={6} lgOffset={3}>\n                  <FormControl value={this.state.password} onChange={this.handleChange} \n                  type=\"password\" name=\"password\" id=\"exampleInputPassword1\" placeholder=\"Password\"\n                  className=\"social inputs\"/>\n                </Col>\n  \n                <Col xs={12} md={8} mdOffset={2} lg={6} lgOffset={3}>\n                  <Button type=\"submit\" className=\"pink\" onClick={this.login}>\n                    Iniciar Sesi√≥n\n                  </Button>\n                </Col>\n\n            </Form>\n        </Grid>\n      </div>\n    );\n  }\n}\nexport default Login;\n","import React, { Component } from 'react';\nimport Wall from '../Wall/';\nimport Login from '../Login/';\nimport {fbsConfig} from '../../Config/ConfigFB';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = ({\n      user: null,\n    });\n    this.authListener = this.authListener.bind(this);\n  }\n\n  componentDidMount() {\n    this.authListener();\n  }\n\n  authListener() {\n    fbsConfig.auth().onAuthStateChanged((user) => {\n      console.log(user);\n      if (user) {\n        this.setState({ user });\n        localStorage.setItem('user', user.uid);\n        localStorage.setItem('photo', user.photoURL);\n        localStorage.setItem('userName', user.displayName);\n        localStorage.setItem('mail', user.email);\n      } else {\n        this.setState({ user: null });\n        localStorage.removeItem('user');\n      }\n    });\n  }\n  render() {\n    return (\n     <div>{this.state.user ?  (<Wall />) : (<Login />)}</div>\n    )};\n\n}\n\n export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.466fc55f.svg\";"],"sourceRoot":""}